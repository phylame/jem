package pw.phylame.imabw

import jem.*
import jem.core.Attributes
import jem.core.Book
import jem.core.Chapter
import jem.epm.EpmInParam
import jem.epm.EpmManager
import jem.epm.EpmOutParam
import jem.epm.util.InputCleaner
import java.io.File
import java.util.*

fun createBook(title: String): Book {
    val book = Book(title)
    book.date = Date()
    book.rights = "(C) 2017 PW Arts"
    book.language = Locale.getDefault()
    book.attributes["tested"] = true
    book.vendor = "generated by Imabw for Android"

    for (i in 1..7) {
        val section = Chapter("第 $i 章")
        Attributes.setIntro(section, "This is a section item, to see more info long click at it")
        if (i % 3 == 0) {
            for (j in 1..5) {
                val chapter = Chapter("第 $i.$j 章")
                Attributes.setIntro(chapter, "This is chapter in a section, and also has attributes")
                chapter.words = 3000
                section.append(chapter)
            }
        } else {
            section.words = 1234
        }
        book.append(section)
    }

    return book
}

fun readBook(param: EpmInParam, cached: Boolean): Book {
    if (cached) {
        val cache = dumpCache(param.file)
        val book = EpmManager.readBook(cache, param.format, param.arguments)
        book.registerCleanup(InputCleaner(null, cache))
        param.cache = cache
        return book
    } else {
        return EpmManager.readBook(param.file, param.format, param.arguments)
    }
}

fun writeBook(param: EpmOutParam) {
    EpmManager.writeBook(param.book, param.file, param.format, param.arguments)
}

fun dumpCache(file: File): File {
    val cache = File.createTempFile("imabw_", ".tmp")
    file.copyTo(cache, true)
    return cache
}
