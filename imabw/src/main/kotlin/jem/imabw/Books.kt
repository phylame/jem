/*
 * Copyright 2017 Peng Wan <phylame@163.com>
 *
 * This file is part of Jem.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package jem.imabw

import jclp.setting.MapSettings
import jclp.text.Text
import jem.Book
import jem.JemException
import jem.epm.*
import jem.title
import mala.App
import java.util.concurrent.ThreadLocalRandom

const val SWAP_SUFFIX = ".swp"

fun defaultMakerSettings() = MapSettings().apply {
    this[MAKER_OVERWRITE_KEY] = true
    this[MAKER_VDM_COMMENT_KEY] = "generated by ${Imabw.name} v${Imabw.version}"
}

fun loadBook(param: ParserParam): Book {
    Thread.sleep(ThreadLocalRandom.current().nextLong(2000))
    return EpmManager.readBook(param) ?: throw UnknownEpmException()
}

fun makeBook(param: MakerParam): String {
    Thread.sleep(ThreadLocalRandom.current().nextLong(2000))
    return EpmManager.writeBook(param) ?: throw UnknownEpmException()
}

class UnknownEpmException : JemException("")

class LoadBookTask(val param: ParserParam) : ProgressTask<Book>() {
    init {
        setOnRunning {
            updateProgress(App.tr("jem.loadBook.hint", param.path))
        }
        setOnSucceeded {
            hideProgress()
            Imabw.message(App.tr("jem.openBook.success", param.path))
        }
        setOnFailed {
            hideProgress()
            App.error("failed to load '${param.path}'", exception)
        }
    }

    override fun call() = loadBook(param)
}

class MakeBookTask(val param: MakerParam) : ProgressTask<String>() {
    init {
        val actualPath = param.path.replace(SWAP_SUFFIX, "")
        setOnRunning {
            updateProgress(App.tr("jem.makeBook.hint", param.book.title, actualPath))
        }
        setOnSucceeded {
            hideProgress()
            Imabw.message(App.tr("jem.saveBook.success", param.book.title, actualPath))
        }
        setOnFailed {
            hideProgress()
            App.error("failed to store '${param.book.title}' to '${param.path}'", exception)
        }
    }

    override fun call() = makeBook(param)
}

class LoadTextTask(private val text: Text) : ProgressTask<String>() {
    init {
        setOnFailed {
            hideProgress()
            App.error("failed to load text", exception)
        }
    }

    override fun call() = text.toString()
}
