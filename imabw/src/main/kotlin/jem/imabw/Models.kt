package jem.imabw

import javafx.beans.binding.Bindings
import javafx.beans.property.SimpleBooleanProperty
import javafx.beans.property.SimpleIntegerProperty
import javafx.beans.property.SimpleObjectProperty
import javafx.beans.property.SimpleStringProperty
import javafx.collections.FXCollections
import javafx.collections.ListChangeListener
import javafx.concurrent.Task
import javafx.scene.control.MenuItem
import javafx.scene.control.SeparatorMenuItem
import jclp.log.Log
import jclp.setting.MapSettings
import jem.Book
import jem.Chapter
import jem.epm.*
import jem.imabw.ui.inputText
import jem.imabw.ui.openBookFile
import jem.imabw.ui.saveBookFile
import jem.title
import mala.App
import mala.App.tr
import mala.ixin.Command
import mala.ixin.CommandHandler

object Workbench : CommandHandler {
    private const val TAG = "Workbench"

    val workProperty = SimpleObjectProperty<Work>()

    var work: Work
        get() = workProperty.value
        set(value) {
            workProperty.value?.let {
                it.path?.let { History.insert(it) }
                it.cleanup()
            }
            workProperty.value = value.also {
                it.path?.let { History.remove(it) }
            }
            initActions()
        }

    init {
        Imabw.register(this)
    }

    inline fun ensureSaved(title: String, block: () -> Unit) {
        if (work.isModified) {
            println("ask save for $title")
            saveFile()
        }
        block()
    }

    fun newBook(title: String) {
        work = Work(Book(title))
        Imabw.message("Created new book '$title'")
    }

    fun openBook(param: ParserParam) {
        if (work.path == param.path) {
            Log.t(TAG) { "'${param.path}' is already opened" }
            return
        }
        val task = object : Task<Book>() {
            override fun call() = EpmManager.readBook(param)
        }
        task.setOnRunning {
            Imabw.form.beginProgress()
            Imabw.form.updateProgress("Loading '${param.path}' with '${param.epmName}'")
        }
        task.setOnSucceeded {
            work = Work(task.value, param)
            Imabw.form.endProgress()
            Imabw.message("Opened book '${param.path}'")
        }
        task.setOnFailed {
            Imabw.form.endProgress()
            println("show exception dialog")
            task.exception.printStackTrace()
        }
        Imabw.submit(task)
    }

    fun saveBook(param: MakerParam) {
        val task = object : Task<String>() {
            override fun call() = EpmManager.writeBook(param)
        }
        task.setOnRunning {
            Imabw.form.beginProgress()
            Imabw.form.updateProgress("Writing '${param.path}' with '${param.epmName}'")
        }
        task.setOnSucceeded {
            work.outParam = param
            work.isModified = false
            work.path = task.value
            Imabw.form.endProgress()
            Imabw.message("Saved book to '${task.value}'")
        }
        task.setOnFailed {
            Imabw.form.endProgress()
            println("show exception dialog")
            task.exception.printStackTrace()
        }
        Imabw.submit(task)
    }

    fun exportBook(chapters: Collection<Chapter>) {
        println("save chapters: $chapters")
    }

    internal fun ready() {
        // TODO: parse the app arguments
        newBook(tr("book.untitled"))
    }

    internal fun dispose() {
        work.cleanup()
        work.path?.let { History.insert(it) }
        History.sync()
    }

    private fun initActions() {
        val work = work
        val actionMap = Imabw.actionMap
        actionMap["clearHistory"]?.disableProperty?.bind(Bindings.isEmpty(History.paths))
        actionMap["saveFile"]?.disableProperty?.bind(work.modifiedProperty.not().and(work.pathProperty.isNotNull))
        actionMap["fileDetails"]?.disableProperty?.bind(work.pathProperty.isNull)
    }

    @Command
    fun saveFile() {
        if (!work.isModified && work.path != null) {
            Log.d(TAG) { "Book is not modified" }
            return
        }
        var param = work.outParam
        if (param == null) {
            val file = saveBookFile(Imabw.form.stage) ?: return
            val settings = MapSettings()
            settings[MAKER_OVERWRITE_KEY] = true
            settings[MAKER_VDM_COMMENT_KEY] = "generated by ${Imabw.name} v${Imabw.version}"
            param = MakerParam(work.book, file.path, "pmab", settings)
        }
        saveBook(param)
    }

    override fun handle(command: String, source: Any): Boolean {
        when (command) {
            "exit" -> ensureSaved(tr("d.exit.title")) {
                App.exit()
            }
            "newFile" -> ensureSaved(tr("d.newBook.title")) {
                inputText(tr("d.newBook.title"), tr("d.newBook.tip"), tr("book.untitled"))?.let {
                    newBook(it)
                }
            }
            "openFile" -> ensureSaved(tr("d.openBook.title")) {
                openBookFile(Imabw.form.stage)?.let { openBook(ParserParam(it.path)) }
            }
            "saveAsFile" -> exportBook(listOf(work.book))
            "clearHistory" -> History.clear()
            else -> return false
        }
        return true
    }
}

class Work(val book: Book, val inParam: ParserParam? = null) {
    val modifiedProperty = SimpleBooleanProperty()

    val pathProperty = SimpleStringProperty(inParam?.path)

    var isModified: Boolean
        get() = modifiedProperty.value
        set(value) {
            modifiedProperty.value = value
        }

    var path: String?
        get() = pathProperty.value
        set(value) {
            pathProperty.value = value
        }

    var outParam: MakerParam? = null

    fun cleanup() {
        Imabw.submit {
            println("cleanup book ${book.title}")
            book.cleanup()
        }
    }
}

private class Modification {
    val attributes = SimpleIntegerProperty()
    val extensions = SimpleIntegerProperty()
    val contents = SimpleIntegerProperty()
    val text = SimpleIntegerProperty()

    val modified = attributes.greaterThan(0)
            .or(extensions.greaterThan(0))
            .or(contents.greaterThan(0))
            .or(text.greaterThan(0))
}

object History {
    internal val paths = FXCollections.observableArrayList<String>()

    val last get() = paths.firstOrNull()

    init {
        paths.addListener(ListChangeListener {
            val items = Imabw.menuMap["menuHistory"]!!.items
            val isEmpty = items.size == 1
            while (it.next()) {
                if (it.wasRemoved()) {
                    for (path in it.removed) {
                        items.removeIf { it.text == path }
                    }
                    if (items.size == 2) { // remove separator
                        items.remove(0, 1)
                    }
                }
                if (it.wasAdded()) {
                    val paths = items.map { it.text }
                    it.addedSubList.filter { it !in paths }.mapIndexed { i, path ->
                        if (i == 0 && isEmpty) { // insert separator
                            items.add(0, SeparatorMenuItem())
                        }
                        items.add(0, MenuItem(path).apply {
                            setOnAction { Workbench.openBook(ParserParam(text)) }
                        })
                    }
                }
            }
        })
        load()
    }

    fun remove(path: String) {
        paths.remove(path)
    }

    fun insert(path: String) {
        paths.remove(path)
        paths.add(0, path)
    }

    fun clear() {
        paths.clear()
    }

    fun load() {
        println("load history")
    }

    fun sync() {
        println("sync history")
    }
}
